# paiza国では、1 円と X 円と Y 円の 3 種類の硬貨しかありません。ちょうど Z 円を支払うとき、支払う硬貨の枚数が最小になるように支払ったときの硬貨の枚数を求めてください。ただし、支払う各硬貨の枚数に制限は無いものとします。

# 条件
# すべてのテストケースにおいて、以下の条件をみたします。
# ・ 2 ≦ X , Y ≦ 1000
# ・ X != Y
# ・ 1 ≦ Z ≦ 3000

x,y,z = gets.chomp.split.map(&:to_i)

ans = z

(0..1500).each do |i|
    (0..1500).each do |j|
        if (x*i + y*j) <= z 
            one_yen = z - (x*i) - (y*j)
            if(i + j + one_yen) < ans 
                ans = i + j + one_yen
            end
        end
    end
end

puts ans

# 解説
# 大きな硬貨で払えるだけ払う操作を繰り返すことで最小枚数で支払うことができるように見えますが、次のような場合に正しい答えが得られません。
# 例） 1 円 , 7 円 , 16 円 を使って 21 円を支払うとき
# 大きな金額から支払った場合
# 16 円 1 枚
# 1 円 5 枚
# 最小枚数で支払った場合
# 7 円 3 枚
# このような場合に正しい答えを出すためにはどうしたら良いでしょうか。
# 一番楽なのは、全ての硬貨の支払い方を調べることです。全ての 1 , X , Y 円硬貨の支払い方を調べるには最大で Z^3 回ほど計算をする必要があります。
# 今回はちょうど Z 円を支払うため、X , Y 円硬貨の支払う枚数をそれぞれ a , b 枚と決めた場合、1 円硬貨を支払う枚数は Z - X × a -Y × b 枚となります。
# また、Z < X × a + Y × b の場合は明らかに Z 円ちょうど支払うことができません。
# この関係を用いることで、支払う X , Y 円の枚数についての二重ループを用いた全探索によってこの問題を解くことができます。
# 2 ≦ X , Y ≦ 1000 と 1 ≦ Z ≦ 3000 より、X , Y 円硬貨を支払う枚数は最大で 1500 枚となる(x = 2, y = 0 1500枚)ので、各ループは 0 〜 1500 で回せば良いです。