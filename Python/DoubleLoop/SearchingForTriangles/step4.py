# 整数 N が与えられるので、1 × 2 × ... × (N-1) × N を最大で何回 2 で割ることができるかを求めてください。


n = int(input())

ans = 0
for i in range(1, n + 1):
    now = i
    while now % 2 == 0:
        now //= 2
        ans += 1

print(ans)

# 解説
# 素直に 1 × 2 × ... × (N-1) × N を計算してから 2 で割ろうとすると、かけ算の計算結果が巨大な数となってしまいオーバーフローしてしまいます。
# そこで、次の性質を利用します。
# 2 は素数であるので、1 × 2 × ... × (N-1) × N を 2 で割ることができる回数は、
# (1 を 2 で割ることができる回数) + (2 を 2 で割ることができる回数) + ... + (N-1 を 2 で割ることができる回数) + (N を 2 で割ることができる回数) と一致する。
# よって、この問題は次のような問題と同じ意味になります。
# 「1 〜 N の各値について 2 で割ることのできる回数を調べ、それらの和を求める。」 「1 〜 N の各値について」についてはループ処理で行うことができ、
# 「2 で割ることのできる回数を調べる」処理は、「ループ変数が 2 で割り切れる場合、2 で割る。」という処理を繰り返すことでおこなうことができます。
# 結果、この問題は二重ループで解くことができます。